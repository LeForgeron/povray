#!/bin/sh

########################################################################################################################
#
# Verify that all the version identifiers in the source tree match.

ver_povray_h=`sed -n 's/#define [ ]*OFFICIAL_VERSION_STRING [ ]*"\([0-9]*\.[0-9]*\.[0-9]*\)"/\1/p' source/backend/povray.h`
ver_povray_h_int=`sed -n 's/#define [ ]*OFFICIAL_VERSION_NUMBER [ ]*\([0-9]*\)/\1/p' source/backend/povray.h`
ver_povray_h_hex=`sed -n 's/#define [ ]*OFFICIAL_VERSION_NUMBER_HEX [ ]*\(0x[0]*[0-9]*\)/\1/p' source/backend/povray.h`
ver_VERSION=`cat unix/VERSION`
prerelease_povray_h=`sed -n 's/^.*#define [ ]*POV_RAY_PRERELEASE [ ]*"\([^"]*\)".*$/\1/p' source/backend/povray.h`

echo "source/backend/povray.h identifies this as version:"
echo "  $ver_povray_h-$prerelease_povray_h"
echo "  $ver_povray_h_int"
echo "  $ver_povray_h_hex"

if [ x"$ver_povray_h_int" != x"`echo $ver_povray_h | sed 's/\.//g'`" ]
then
  echo "MISMATCH."
  exit 1
fi

if [ x"`echo $ver_povray_h_hex | sed 's/0x0*//g'`" != x"$ver_povray_h_int" ]
then
  echo "MISMATCH."
  exit 1
fi

echo "unix/VERSION identifies this as version:"
echo "  $ver_VERSION"

if [ x"$ver_VERSION" != x"$ver_povray_h-$prerelease_povray_h" ]
then
  echo "MISMATCH."
  exit 1
fi

########################################################################################################################
#
# Update prerelease id (trailing numeric portion) if there is any change to the actual program code.
# We're setting the prerelease id to the number of minutes since 2000-01-01 00:00.

if git diff --cached --name-only | grep -E "^source/|^vfe/|^mac/|^unix/|^windows/|^libraries/" >/dev/null
then
  if [ x"$prerelease_povray_h" = x"" ]
  then
    echo "this does not seem intended to be a prerelease"
  else
    y2k=`date -u -d"2000-01-01" +"%s"`
    timestamp=`date -u +"%s"`
    revision=`expr \( "$timestamp" - "$y2k" \) / 60`
    echo "changes to the POV-Ray code detected, updating prerelease id to $revision."
    if git diff --name-only "source/backend/povray.h" | grep "source/backend/povray.h" >/dev/null
    then
      echo "ERROR: Unstaged changes to source/backend/povray.h detected, can't safely update prerelease id."
      exit 1
    fi
    if git diff --name-only "unix/VERSION" | grep "unix/VERSION" >/dev/null
    then
      echo "ERROR: Unstaged changes to unix/VERSION detected, can't safely update prerelease id."
      exit 1
    fi
    sed -i 's/\(#define [ ]*POV_RAY_PRERELEASE [ ]*".*[^0-9]\)[0-9][0-9]*"/\1'"$revision"'"/g' source/backend/povray.h >/dev/null 2>/dev/null
    git add source/backend/povray.h
    sed -i 's/\([^0-9]\)[0-9][0-9]*$/\1'"$revision"'/g' unix/VERSION >/dev/null 2>/dev/null
    git add unix/VERSION
  fi
else
  echo "changes are limited to accompanying files, no need to update POV_RAY_PRERELEASE."
fi

########################################################################################################################
#
# Sanitize changed C/C++ source files:
# - Update copyright year

year=`date -u +"%Y"`
copytext='\(Copyright [1-2][90][0-9][0-9]-\)20[0-9][0-9]\( Persistence of Vision Raytracer Pty. Ltd.\)'

for fname in `git diff --cached --name-only | grep -E "^source/|^vfe/|^mac/|^unix/|^windows/" | grep -E ".cpp$|.h$"`
do

  echo "Sanitizing $fname"

  if git diff --name-only "$fname" | grep "$fname" >/dev/null
  then
    echo "ERROR: Unstaged changes to $fname detected, can't safely sanitize file."
    exit 1
  fi

  # Update copyright year

  year=`date -u +"%Y"`
  sed -i 's/'"$copytext"'/\1'"$year"'\2/g' "$fname" >/dev/null 2>/dev/null

done

########################################################################################################################
#
# Sanity-check changed C/C++ source files:
# - check for presence of copyright statement
# - check for proper doxygen @file tag
# - check for tab characters and trailing whitespace

tab=`echo -e "\t"`

errors=""
for fname in `git diff --cached --name-only | grep -E "^source/|^vfe/|^mac/|^unix/|^windows/" | grep -E ".cpp$|.h$"`
do

  echo "Sanity-checking $fname"

  # Check for copyright statement

  if ! grep "$copytext" "$fname" >/dev/null
  then
    errors=`echo "$errors" ; echo "$fname: missing copyright statement"`
  fi

  # Check for proper doxygen @file tag

  shortfname=`echo "$fname" | sed 's/^source\///g'`
  if ! grep '@file  *'"$shortfname"'$' "$fname" >/dev/null
  then
    errors=`echo "$errors" ; echo "$fname: missing doxygen '@file $shortfname' tag"`
  fi
  if grep "@file " "$fname" | sed 's|  *'"$shortfname"' *||g' | grep "@file " >/dev/null
  then
    errors=`echo "$errors" ; echo "$fname: wrong doxygen '@file ...' tag"`
  fi
  
  # Check for undesired whitespace
  
  if grep "$tab" "$fname" >/dev/null
  then
    errors=`echo "$errors" ; echo "$fname: tab characters found"`
  fi
  if grep -E " $" "$fname" >/dev/null
  then
    errors=`echo "$errors" ; echo "$fname: trailing whitespace found"`
  fi

done

if [ x"$errors" != x"" ]
then
  echo "$errors"
  exit 1
fi

########################################################################################################################
#
# Done.

exit 0
